==== A2 phase I marking ====

Group number: group_0286
UTORID usernames of members: chongada, hammoudm, zhangbr6, yanjuli1
Total deductions: -2.50
Marked by: Brian Lam (brianandrew.lam@mail.utoronto.ca)
Grade: A-
[Instructor has increased your mark by +2 letter grade]. Your new letter grade is A+

Your team's Phase II grade is based on this scale:

    http://www.artsandscience.utoronto.ca/ofr/calendar/rules.htm#grading

The way we graded is as follows: your team starts with an A+. When errors and
problems are found, you will lose 0, 1, 2, or 3 letter steps, depending on the
severity. As an example, if you lost two steps, your team would earn an A-:

     A+ -> A
     A -> A-

You were asked to follow the Scrum process. A big part of that is to maintain
a product backlog and a sprint backlog. 

==== Product and Sprint backlogs ==== [up to -6]

Several steps can be lost for these kinds of issues:

  No evidence of Product or Sprint backlog -6
  No evidence of team assigning tasks to team members -3
  SB items not taken directly from PB -1
  SB items not broken down into smaller steps -1
  PB, SB uses noticeably bad grammar and/or spelling -2

[TA Comments]
Well done. Very clearly planned out and the team has assigned tasks to team
members.  

==== Java Style ==== [up to -6]

Steps can be lost for these kinds of issues:

    Java naming conventions not followed (camelCase, no_underscores) -1
    Instance variable names not meaningful (e.g., "Label1" is not a good name) -1
    Bad indentation -1
    Lack of consistency in style across files -1
    Bad use of whitespace: too much or too little -1
    Class names are frequently not noun phrases -1
    Method names are frequently not verb phrases -1
    Not following the 80character column width limit. -1

[TA Comments]
I would recommend renaming Config and getConfigTable().

==== Design ==== [up to -6]

Several steps can be lost for these kinds of issues:

    public instance variables instead of setters and getters -1 to -2
    not a good breakdown of classes and methods (everything static; no ability
        to, for example, make two shells that coexist; not extensible) -1
    long methods exist (more than roughly 30 lines from brace to brace) -1
    hard to add new commands -1
    no unified path handling mechanism -2
    redirection doesn't easily incorporate new commands -2

[TA Comments]
Your design is fairly well-done. Good use of singleton.

==== Javadoc ==== [up to -3]

Several steps can be lost for these kinds of issues:

    Missing Javadoc on methods -1 for infrequent problems, up to -3 for frequent
    Missing Javadoc on class -1
    No Javadoc on instance vars -1
    Missing use @param and @return tags -1
    Unclear English: bad grammar, bad spelling up to -2

[TA Comments]
No issues with documentation. Good use of mock objects.

==== Testing ==== [up to -6] 
Several steps can be lost for these kinds of issues:

    No test cases exist for public methods -6
    Some testing done for all classes and methods, but not thoroughly up to -3
    Test quality is inadequate or tests uninformative -1 to -2
        e.g., testing using lots of print statements instead of assert calls
    Code not written to be testable -2

[TA Comments]
Some more testing could be done on echo. (-1)

==== Correctness ==== [up to -6]

    Code doesn't compile without modification (if the fix is simple) -1
    Code that is complete (from the SB) doesn't work completely: up to -2
    Code crashes: -3
    Each missing/incomplete feature -1

[TA Comments]
Failed test cases (-0.25 * 3 = -0.50):
1) Echoing with quotes:
    echo “Hello World”
   Expected: Hello World
   Actual: echo "Hello World": Invalid argument error.

2) Exit with whitespace:
               exit
   Expected: JShell should exit.
   Actual: An InstantiationException has occurred: java.lang.InstantiationException: commands.Exit
           java.lang.InstantiationException: commands.ExitIncorrect command: exit
           PC: / 
           at java.lang.Class.newInstance(Class.java:427)
           at utils.InputParser.parseInput(InputParser.java:66)
           at utils.InputParser.getCommand(InputParser.java:99)
           at driver.JShell.main(JShell.java:92)
           Caused by: java.lang.NoSuchMethodException: commands.Exit.<init>()
           at java.lang.Class.getConstructor0(Class.java:3082)
           at java.lang.Class.newInstance(Class.java:412)
           ... 3 more


Code crashes when exiting. (-1)

Comments:
Just a few tiny issues in your code in terms of test cases. Good design overall.
I would however change the naming of your Config class to another name. 
CommandTable may be a more suitable name. Also, instead of having your 
getConfigTable() add to your HashMap everytime it is called, you should
do the adding to HashMaps inside of the constructor and have getConfigTable() return
the HashMap.

